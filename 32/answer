回答1-1
Single responsibility
単一の責任を持つ単位でコードを分割するべき
ある責任による変更が他の責任に影響しないようにすることで変更が容易になる

Open closed
変更ではなく拡張を行うべき
インターフェイスに依存することで既存の処理に影響することなく処理を追加できる

Liskov substitution
子クラスから親クラスへ依存先を変更しても動作するべき
子クラスの追加が容易になる

Interface segregation
クライアントによってインターフェイスを分割するべき
変更が影響する

Dependency inversion
インターフェイスに依存することで実装を差し替え可能にする

回答1-2
単に分割してもある責任による変更が他の責任に影響すれば意味がない

回答1-3
アニマルインターフェイスを期待するバウメソッド

回答1-4
子クラスを追加する際に既存の処理に影響する

回答1-5
実装を追加することで既存の処理に影響することなく変更できる
テストが容易になる

回答1-6
DB等外部サービスを用いる場合

回答1-7
あるクラスの他のクラスに対して持っている仮定を最小限にすべき
Purchaseクラスが変更された場合にそれを用いるクラスに対する影響が大きい

回答2
Purchaseが増加するほどパフォーマンスが低下する
ドメインサービス内でuserIdとproductIdでリポジトリから取得して有無について判定する

回答3
名前や勤務開始日についてルールが追加された場合に変更箇所が散らばる
アクセス修飾子をprivateに変更し更新用のメソッドを設けることで変更箇所がまとまる
